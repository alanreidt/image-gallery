{"version":3,"sources":["components/TopBar.tsx","components/ImageCard.tsx","components/ImageGrid.tsx","components/GroupedImageGrid.tsx","utils/constants.tsx","utils/helpers.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TopBar","props","tagInputText","isLoading","grouped","handleFormSubmit","handleTagInputChange","handleClearButtonClick","handleGroupingButtonChange","className","Form","name","inline","onSubmit","Label","htmlFor","srOnly","Control","id","placeholder","value","onChange","required","Button","type","variant","disabled","onClick","ButtonGroup","toggle","ToggleButton","checked","ImageCard","image","handleImageCardClick","restProps","Card","as","href","data-tag","tag","Img","src","alt","style","maxHeight","ImageGrid","images","Row","sm","map","Col","GroupedImageGrid","imagesByTag","reduce","currentImage","get","undefined","set","Map","entries","Header","apiKey","composeGiphyGetUrlByTag","requestImageByTag","url","fetch","App","initialImages","initialGrouped","useState","setLoading","errorAlertShown","setErrorAlertShown","notFoundAlertShown","setNotFoundAlertShown","setGrouped","setTagInputText","setImages","useEffect","then","response","json","result","data","Array","isArray","catch","event","preventDefault","currentTarget","dataset","imageGrid","groupedImageGrid","Container","fluid","Alert","show","onClose","dismissible","Heading","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75d43cd9.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\n\nimport { TopBarProps } from '../utils/constants';\n\nexport function TopBar(props: TopBarProps) {\n  const {\n    tagInputText,\n    isLoading,\n    grouped,\n    handleFormSubmit,\n    handleTagInputChange,\n    handleClearButtonClick,\n    handleGroupingButtonChange,\n  } = props;\n\n  return (\n    <div className=\"TopBar d-flex py-4 justify-content-center\">\n      <Form name=\"top-bar-form\" inline onSubmit={handleFormSubmit}>\n        <Form.Label htmlFor=\"tag\" srOnly>Введите тег</Form.Label>\n        <Form.Control\n          name=\"tag\"\n          id=\"tag\"\n          className=\"mr-2\"\n          placeholder=\"Введите тег\"\n          value={tagInputText}\n          onChange={handleTagInputChange}\n          required\n        />\n        <Button\n          type=\"submit\"\n          className=\"mr-2\"\n          variant=\"success\"\n          disabled={isLoading}\n        >\n          {isLoading ? 'Загрузка…' : 'Загрузить'}\n        </Button>\n        <Button\n          className=\"mr-2\"\n          variant=\"danger\"\n          onClick={handleClearButtonClick}\n        >\n          Очистить\n        </Button>\n        <ButtonGroup toggle>\n          <ToggleButton\n            type=\"checkbox\"\n            value=\"grouped\"\n            checked={grouped}\n            onChange={handleGroupingButtonChange}\n          >\n            {grouped ? 'Разгруппировать' : 'Группировать'}\n          </ToggleButton>\n        </ButtonGroup>\n      </Form>\n    </div>\n  );\n}\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\nimport { ImageCardProps } from '../utils/constants';\n\nexport function ImageCard(props: ImageCardProps) {\n  const {\n    image,\n    handleImageCardClick,\n    ...restProps\n  } = props;\n\n  const sx: React.CSSProperties = {\n    maxHeight: '300px',\n  };\n\n  return (\n    <Card\n      as={'a'}\n      href=\"#\"\n      className=\"p-1 h-100\"\n      data-tag={image.tag}\n      onClick={handleImageCardClick}\n      {...restProps}\n    >\n      <Card.Img src={image.src} alt={image.alt} style={sx} />\n    </Card>\n  );\n}\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport { ImageCard } from './ImageCard';\nimport { ImageGridProps } from '../utils/constants';\n\nexport function ImageGrid(props: ImageGridProps) {\n  const {\n    images,\n    handleImageCardClick,\n  } = props;\n\n  return (\n    <div className=\"ImageGrid\">\n      <Row sm=\"3\">\n        {images.map((image) => (\n          <Col key={image.id} className=\"mb-4\">\n            <ImageCard\n              image={image}\n              handleImageCardClick={handleImageCardClick}\n            />\n          </Col>\n        ))}\n      </Row>\n    </div>\n  );\n}\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\nimport { ImageGrid } from './ImageGrid';\nimport {\n  ImageGridProps,\n  ImageInterface,\n} from '../utils/constants';\n\nexport function GroupedImageGrid(props: ImageGridProps) {\n  const {\n    images,\n    handleImageCardClick,\n  } = props;\n\n  const imagesByTag = images.reduce(\n    (map: Map<ImageInterface['tag'], ImageInterface[]>, currentImage) => {\n      const { tag } = currentImage;\n      const images = map.get(tag);\n\n      if (images !== undefined) {\n        map.set(tag, [...images, currentImage]);\n      } else {\n        map.set(tag, [currentImage]);\n      }\n\n      return map;\n    },\n    new Map()\n  );\n\n  return (\n    <div className=\"GroupedImageGrid\">\n      {[...imagesByTag.entries()].map(([tag, images]) => (\n        <Card key={tag} className=\"mb-2\">\n          <Card.Header>{tag}</Card.Header>\n          <ImageGrid\n            images={images}\n            handleImageCardClick={handleImageCardClick}\n          />\n        </Card>\n      ))}\n    </div>\n  );\n}\n","export interface ImageInterface {\n  id: string;\n  src: string;\n  tag: string;\n  alt: string;\n}\n\nexport interface AppConfig {\n  initialImages?: ImageInterface[];\n  initialGrouped?: boolean;\n}\n\nexport type ImageCardProps = {\n  image: ImageInterface;\n  handleImageCardClick: React.MouseEventHandler<HTMLAnchorElement | HTMLButtonElement>;\n};\n\nexport type ImageGridProps = {\n  images: ImageInterface[];\n  handleImageCardClick: React.MouseEventHandler<HTMLAnchorElement | HTMLButtonElement>;\n};\n\nexport type TopBarProps = {\n  tagInputText: ImageInterface['tag'];\n  isLoading: boolean;\n  grouped: boolean;\n  handleFormSubmit: React.FormEventHandler<HTMLFormElement>;\n  handleTagInputChange: React.ChangeEventHandler<HTMLInputElement>;\n  handleClearButtonClick: React.MouseEventHandler<HTMLButtonElement>;\n  handleGroupingButtonChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nexport const GIPHY_API_KEY = 'GoyWRXL2P2hOgo4MQmrKROqrX1S3vVFI';\n","import { GIPHY_API_KEY, ImageInterface } from './constants';\n\nconst composeGiphyGetUrlByKeyAndTag = (apiKey: string) => (tag: ImageInterface['tag']) => (\n  `https://api.giphy.com/v1/gifs/random?api_key=${apiKey}&tag=${tag}`\n);\n\nconst composeGiphyGetUrlByTag = composeGiphyGetUrlByKeyAndTag(GIPHY_API_KEY);\n\nconst requestImageByTag = (tag: ImageInterface['tag']) => {\n  const url = composeGiphyGetUrlByTag(tag);\n\n  return fetch(url);\n}\n\nexport {\n  composeGiphyGetUrlByKeyAndTag,\n  composeGiphyGetUrlByTag,\n  requestImageByTag,\n}\n","import React, { useState, useEffect } from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Alert from 'react-bootstrap/Alert';\n\nimport { TopBar } from './components/TopBar';\nimport { ImageGrid } from './components/ImageGrid';\nimport { GroupedImageGrid } from './components/GroupedImageGrid';\nimport { ImageInterface, AppConfig } from './utils/constants';\nimport { requestImageByTag } from './utils/helpers';\n\nfunction App(props: AppConfig = {}) {\n  const {\n    initialImages = [],\n    initialGrouped = false,\n  } = props;\n\n  const [isLoading, setLoading] = useState(false);\n  const [errorAlertShown, setErrorAlertShown] = useState(false);\n  const [notFoundAlertShown, setNotFoundAlertShown] = useState(false);\n  const [grouped, setGrouped] = useState(initialGrouped);\n  const [tagInputText, setTagInputText] = useState('');\n  const [images, setImages] = useState(initialImages);\n\n  useEffect(() => {\n    if (isLoading) {\n      requestImageByTag(tagInputText)\n        .then((response) => response.json())\n        .then((result) => {\n          const { data } = result;\n\n          if (Array.isArray(data)) {\n            setLoading(false);\n            setNotFoundAlertShown(true);\n            return;\n          }\n\n          const {\n            id,\n            'image_url': src,\n          } = data;\n\n          const image: ImageInterface = {\n            id,\n            src,\n            tag: tagInputText,\n            alt: tagInputText,\n          };\n\n          setImages((images) => [...images, image]);\n          setLoading(false);\n        }).catch(() => {\n          setErrorAlertShown(true);\n        });\n    }\n  }, [isLoading, tagInputText]);\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setLoading(true);\n  };\n\n  const handleTagInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setErrorAlertShown(false);\n    setNotFoundAlertShown(false);\n    setTagInputText(event.currentTarget.value);\n  };\n\n  const handleClearButtonClick = () => {\n    setTagInputText('');\n    setImages([]);\n  };\n\n  const handleGroupingButtonChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setGrouped(event.currentTarget.checked);\n  };\n\n  const handleImageCardClick = (event: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\n    event.preventDefault();\n\n    const tag = event.currentTarget.dataset.tag || '';\n\n    setTagInputText(tag);\n  };\n\n  const imageGrid = (\n    <ImageGrid\n      images={images}\n      handleImageCardClick={handleImageCardClick}\n    />\n  );\n  const groupedImageGrid = (\n    <GroupedImageGrid\n      images={images}\n      handleImageCardClick={handleImageCardClick}\n    />\n  );\n\n  return (\n    <div className=\"App\">\n      <TopBar\n        tagInputText={tagInputText}\n        isLoading={isLoading}\n        grouped={grouped}\n        handleFormSubmit={handleFormSubmit}\n        handleTagInputChange={handleTagInputChange}\n        handleClearButtonClick={handleClearButtonClick}\n        handleGroupingButtonChange={handleGroupingButtonChange}\n      />\n\n      <Container fluid=\"xl\">\n        <Alert\n          variant=\"danger\"\n          show={errorAlertShown}\n          onClose={() => setErrorAlertShown(false)}\n          dismissible\n        >\n          <Alert.Heading>Произошла http ошибка!</Alert.Heading>\n          <p>\n            Попробуйте повторить запрос, либо проверьте интернет соединение.\n          </p>\n        </Alert>\n        <Alert\n          variant=\"warning\"\n          show={notFoundAlertShown}\n          onClose={() => setNotFoundAlertShown(false)}\n          dismissible\n        >\n          <Alert.Heading>По тегу ничего не найдено</Alert.Heading>\n          <p>\n            Попробуйте тег 'cat' — наверняка, что-либо найдется.\n          </p>\n        </Alert>\n\n        {grouped ? groupedImageGrid : imageGrid}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}